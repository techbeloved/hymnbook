import com.techbeloved.hymnbook.shared.model.Lyric;
import kotlin.collections.List;
import kotlinx.datetime.Instant;
CREATE TABLE IF NOT EXISTS SongEntity (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    alternate_title TEXT,
    lyrics TEXT AS List<Lyric> NOT NULL,
    verse_order TEXT,
    copyright TEXT,
    comments TEXT,
    search_title TEXT NOT NULL COLLATE NOCASE,
    search_lyrics TEXT NOT NULL COLLATE NOCASE,
    created INTEGER AS Instant NOT NULL,
    modified INTEGER AS Instant NOT NULL
);

CREATE INDEX IF NOT EXISTS Song_title ON SongEntity(title);

-- A convenient view to fetch all song related data since they are located in different tables.
-- grouped items are separated by '::', whereas multi-columns are separated by '||'
CREATE VIEW IF NOT EXISTS SongDetail AS
SELECT s.id, s.title, s.alternate_title, s.lyrics, s.verse_order, s.copyright,
    GROUP_CONCAT(b.songbook || '||' || b.entry, '::') AS songbookEntries,
    GROUP_CONCAT(a.author || '||' || a.author_type || '||' || a.comment, '::') AS authors,
    GROUP_CONCAT(t.topic, '::') AS topics
FROM SongEntity AS s
LEFT JOIN SongbookSongs AS b ON b.song_id=s.id
LEFT JOIN AuthorSongs AS a ON a.song_id=s.id
LEFT JOIN TopicSongs AS t ON t.song_id=s.id
GROUP BY s.id;

-- Full Text Search on Songs table
CREATE VIRTUAL TABLE songs_fts USING fts5(search_title, search_lyrics, content=SongEntity, content_rowid=id, tokenize=porter);

CREATE TRIGGER trigger_songs_fts_after_insert AFTER INSERT ON SongEntity BEGIN
  INSERT INTO songs_fts(rowid, search_title, search_lyrics) VALUES(new.id, new.search_title, new.search_lyrics);
END;

CREATE TRIGGER trigger_songs_fts_after_delete AFTER DELETE ON SongEntity BEGIN
  INSERT INTO songs_fts(songs_fts, rowid, search_title, search_lyrics) VALUES('delete', old.id, old.search_title, old.search_lyrics);
END;

CREATE TRIGGER trigger_songs_fts_after_update AFTER UPDATE ON SongEntity BEGIN
  INSERT INTO songs_fts(songs_fts, rowid, search_title, search_lyrics) VALUES('delete', old.id, old.search_title, old.search_lyrics);
  INSERT INTO songs_fts(rowid, search_title, search_lyrics) VALUES(new.id, new.search_title, new.search_lyrics);
END;


insert:
INSERT INTO SongEntity(id, title, alternate_title, lyrics, verse_order, copyright, comments, search_title, search_lyrics, created, modified)
VALUES(?, ?,?,?,?,?,?,?,?,?,?);

lastInsertRowId:
SELECT last_insert_rowid();

update:
UPDATE SongEntity
SET title = :title,
    alternate_title = :alternate_title,
    lyrics = :lyrics,
    verse_order = :verse_order,
    copyright = :copyright,
    comments = :comments,
    search_title = :search_title,
    search_lyrics = :search_lyrics,
    modified = :modified
WHERE id = :id;

getAllTitles:
SELECT S.id, S.title, S.alternate_title, B.songbook, B.entry FROM SongEntity AS S
LEFT JOIN SongbookSongs AS B
ON S.id = B.song_id;

-- Select a song matching the title and songbook.
getSongByTitleAndSongbook:
SELECT S.id, S.title FROM SongEntity AS S INNER JOIN SongbookSongs AS B
ON S.id = B.song_id
WHERE S.title = ? AND B.songbook = ?;

-- write a sqldelight query to get a list of songs given the following filter parameters
   -- list of topics and list of songbooks

filterSongsByTopicsAndSongbooks:
SELECT DISTINCT sd.id, sd.title, sd.alternate_title, sbs.songbook, sbs.entry
FROM SongDetail AS sd
LEFT JOIN TopicSongs AS ts ON sd.id = ts.song_id
LEFT JOIN SongbookSongs AS sbs ON sd.id = sbs.song_id
WHERE ts.topic IN :topicNames
AND sbs.songbook IN :songbookNames
GROUP BY sd.id
ORDER BY (CASE WHEN :orderByTitle THEN sd.title ELSE sd.songbookEntries END);


filterSongsByTopics:
SELECT DISTINCT sd.id, sd.title, sd.alternate_title, sbs.songbook, sbs.entry
FROM SongDetail AS sd
LEFT JOIN TopicSongs AS ts ON sd.id = ts.song_id
LEFT JOIN SongbookSongs AS sbs ON sd.id = sbs.song_id
WHERE ts.topic IN :topicNames
GROUP BY sd.id
ORDER BY (CASE WHEN :orderByTitle THEN sd.title ELSE sd.songbookEntries END);


filterSongsBySongbooks:
SELECT DISTINCT sd.id, sd.title, sd.alternate_title, sbs.songbook, sbs.entry
FROM SongDetail AS sd
LEFT JOIN TopicSongs AS ts ON sd.id = ts.song_id
LEFT JOIN SongbookSongs AS sbs ON sd.id = sbs.song_id
AND sbs.songbook IN :songbookNames
GROUP BY sd.id
ORDER BY (CASE WHEN :orderByTitle THEN sd.title ELSE sd.songbookEntries END);


filterSongs:
SELECT DISTINCT sd.id, sd.title, sd.alternate_title, sbs.songbook, sbs.entry
FROM SongDetail AS sd
LEFT JOIN TopicSongs AS ts ON sd.id = ts.song_id
LEFT JOIN SongbookSongs AS sbs ON sd.id = sbs.song_id
GROUP BY sd.id
ORDER BY (CASE WHEN :orderByTitle THEN sd.title ELSE sd.songbookEntries END);

getAllSongs:
SELECT * FROM SongDetail;

getSongById:
SELECT * FROM SongDetail
WHERE SongDetail.id = ?;

searchSongs:
SELECT S.id, S.title, S.alternate_title, B.songbook, B.entry FROM SongEntity AS S
LEFT JOIN SongbookSongs AS B
ON S.id = B.song_id
JOIN songs_fts ON S.id=songs_fts.rowid
WHERE songs_fts MATCH :search
ORDER BY bm25(songs_fts, 10.0);


deleteAll:
DELETE FROM SongEntity;
