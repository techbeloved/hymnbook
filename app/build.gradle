plugins {
    alias libs.plugins.android.application
    alias libs.plugins.kotlin.android
    alias libs.plugins.kotlin.parcelize
    alias libs.plugins.kotlin.serialization
    alias libs.plugins.kotlin.kapt
    alias libs.plugins.androidx.navigation.safe.args
    alias libs.plugins.triplet.play
    alias libs.plugins.google.services
    alias libs.plugins.firebase.crashlytics
    alias libs.plugins.hilt
    alias libs.plugins.jetbrains.compose.compiler
}

def keystorePropertiesFile = rootProject.file("keystore.properties")

def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    keystoreProperties.setProperty("storeFile", System.getenv("KEYSTORE"))
    keystoreProperties.setProperty("keyAlias", System.getenv("ALIAS"))
    keystoreProperties.setProperty("keyPassword", System.getenv("KEY_PASSWORD"))
    keystoreProperties.setProperty("storePassword", System.getenv("KEY_STORE_PASSWORD"))
}

android {
    namespace "com.techbeloved.hymnbook"
    signingConfigs {
        release_config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdk 35
    defaultConfig {
        applicationId "com.techbeloved.hymnbook"
        minSdkVersion 21
        targetSdkVersion 35
        versionCode 32
        versionName "2.3.9"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release_config
        }

        debug {
            multiDexEnabled true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.release_config
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = "17"
    }

    kapt {
        correctErrorTypes true
    }

    buildFeatures {
        dataBinding = true
        compose = true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = libs.versions.compose.compiler.get()
    }

    productFlavors {
    }

    bundle {
        language {
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit true
        }
    }

    playConfigs {
        // only enable for release build in CI (release should be built only on CI)
        release {
            enabled.set(true)
        }
    }
    namespace 'com.techbeloved.hymnbook'
}

kapt {
    generateStubs = true
}

play {
    track.set("internal")
    userFraction.set(0.5d)
    updatePriority.set(2)
    defaultToAppBundles.set(true)

    // Only enable in CI
    enabled.set(false)
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation(project(":shared"))
    implementation(platform(libs.compose.bom))
    implementation(libs.compose.ui)
    implementation(libs.compose.ui.tooling.preview)
    implementation(libs.compose.material3)
    implementation(libs.compose.activity)
    debugImplementation(libs.compose.ui.tooling)
    implementation libs.androidx.appcompat
    implementation libs.androidx.constraintlayout
    implementation libs.androidx.legacy.support.v4

    implementation platform(libs.firebase.bom)
    implementation libs.firebase.crashlytics
    implementation libs.firebase.analytics
    testImplementation libs.test.junit
    androidTestImplementation libs.androidx.runner
    androidTestImplementation libs.test.espresso
    implementation libs.material
    implementation libs.androidx.recyclerview

    implementation libs.androidx.cardview

    // RxJava2
    implementation libs.rxjava
    implementation libs.rxandroid
    implementation libs.rx.preferences
    implementation libs.rxrelay

    implementation libs.androidx.viewModel.ktx
    implementation libs.androidx.livedata.ktx
    implementation libs.androidx.viewModel.savedstate
    testImplementation libs.core.testing
    androidTestImplementation libs.core.testing
    implementation libs.androidx.room.runtime
    kapt libs.androidx.room.compiler
    implementation libs.androidx.palette.ktx

    // For Kotlin use kapt instead of annotationProcessor

    // optional - RxJava support for Room
    implementation libs.androidx.room.rxjava2

    implementation libs.androidx.navigation.fragment.ktx
    // For Kotlin use navigation-fragment-ktx
    implementation libs.androidx.navigation.ui.ktx

    // Test helpers
    testImplementation libs.androidx.room.testing
    implementation libs.androidx.core.ktx

    // Mockito kotlin
    testImplementation libs.mockito.kotlin
    androidTestImplementation libs.test.androidx.junit

    // Timber
    implementation libs.timber

    // Snippety for text styling
    implementation libs.snippety

    // Preferences
    implementation libs.androidx.legacy.preference.v14
    implementation libs.androidx.preference.ktx

    // Custom views
    implementation project(':edittextwithsortby')

    // RxBinding
    implementation libs.rxbinding
    implementation libs.rxbinding.core
    implementation libs.rxbinding.appcompat
    implementation libs.rxbinding.recyclerview
    implementation libs.rxbinding.viewpager
    implementation libs.rxbinding.material

    // Firebase
    implementation libs.firebase.core
    implementation libs.firebase.firestore
    implementation libs.firebase.storage
    implementation libs.firebase.dynamic.links

    // Play core
    implementation libs.app.update.ktx

    // PdfViewer
    implementation libs.android.pdf.viewer

    // Kotlin + coroutines
    implementation libs.androidx.work.runtime

    // optional - RxJava2 support
    implementation libs.androidx.work.rxjava2
    // optional - Test helpers
    androidTestImplementation libs.androidx.work.testing

    // Custom views
    implementation libs.circular.progress.bar

    // Hilt
    implementation libs.hilt.android
    kapt libs.hilt.android.compiler
    testImplementation libs.test.hilt
    androidTestImplementation libs.test.hilt
    kaptTest libs.hilt.compiler

    // When using Kotlin.
    kapt libs.androidx.hilt.compiler

    implementation libs.androidx.hilt.work
    // When using Kotlin.
    kapt libs.androidx.hilt.compiler

    // Media
    implementation libs.androidx.media

    implementation libs.kotlinx.serialization

    implementation libs.taptargetview
}
